generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

// Auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}



enum RoleType {
  ADMIN
  STAFF
  USER
}

model Role {
  type  RoleType @id @unique
  users User[]
}

// User (Person / Visitor / Customer / Staff / Admin)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  session       Session[]
  password      String?
  roleType      RoleType  @default(USER)
  role          Role      @relation(fields: [roleType], references: [type])
  profile       Profile?
  @@map("users")
}

model Profile {
  id        String @id @default(cuid())
  firstName String?
  lastName  String?
  image     String?
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

